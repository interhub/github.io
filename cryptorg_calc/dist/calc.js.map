{"version":3,"sources":["calc.ts"],"names":[],"mappings":"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","file":"calc.js","sourceRoot":"..","sourcesContent":["//MARKET VALUES\nlet MAX_DELTA_MARKET_PERCENT = 3\nconst IS_NODE = typeof window === 'undefined'\n\nconst fixNumber = (num = 0, point = 3) => parseFloat(num.toFixed(point))\n\n\nconst getPercentDiff = (from = 0, to = 0) => {\n    return fixNumber((((Math.abs(from - to) / from)) * 100))\n}\n\nconst addPercent = (value = 0, percent = 0) => {\n    return Math.abs(fixNumber(value * (100 + percent) / 100))\n}\n\nconst subPercent = (value = 0, percent = 0) => {\n    return Math.abs(fixNumber(value * (100 - percent) / 100,))\n}\n\n\n/**\n * INPUT PARAMS\n */\n\nclass SettingItem {\n    static items: any = []\n\n    name: string\n    placeholder: string\n    value: number\n\n    constructor(name, value, placeholder) {\n        this.name = name\n        const ramValue = parseFloat(localStorage.getItem(name)) || value\n        this._value = ramValue\n        this.placeholder = placeholder\n        SettingItem.items.push(this)\n    }\n\n    set _value(val: number) {\n        if (!IS_NODE)\n            localStorage.setItem(this.name, String(val))\n        this.value = val\n    }\n\n}\n\nenum COLORS {\n    ORANGE = '#cc8f2e',\n    RED = '#fc5252',\n    GREEN = '#2ecc40',\n    GREEN_DARK = '#70af11',\n    LIGHT = '#e3e3e3'\n}\n\n\nconst START_MARKET_VALUE = new SettingItem('START_MARKET_VALUE', 185, 'цена валюты входа')\nconst ORDER_LEN = new SettingItem('ORDER_LEN', 10, 'макс число ордеров')\nconst STEP_DEFAULT_PERCENT = new SettingItem('STEP_DEFAULT_PERCENT', 1, 'шаг цены дефолтный')\nconst STEP_DIN = new SettingItem('STEP_DIN', 1.1, 'динамический шаг цены')\nconst START_MART = new SettingItem('START_MART', 1.2, 'мартенгейл')\nconst TAKE_PROFIT_PERCENT = new SettingItem('TAKE_PROFIT_PERCENT', 0.5, 'тейк профит процент')\nconst START_BUY = new SettingItem('START_BUY', 18, 'первый закуп')\n\nconst MAX_LOSE_PERCENT = new SettingItem('MAX_LOSE_PERCENT', 15, 'макс падение цены в процентах')\nconst MAX_BUY = new SettingItem('MAX_BUY', 606, 'максимум вложений')\n\nlet orderPoints: { marketValue: number, orderPrice: number, lastStep: number, sumStep: number, upToTp: number }[] = []\n\n//минимальная цена валюты допустимая\nlet MIN_END_MARKET_VALUE = subPercent(START_MARKET_VALUE.value, MAX_LOSE_PERCENT.value)\n\nconst checkMarketValid = (price = 0) => {\n    const min = subPercent(MIN_END_MARKET_VALUE, MAX_DELTA_MARKET_PERCENT)\n    const max = addPercent(MIN_END_MARKET_VALUE, MAX_DELTA_MARKET_PERCENT)\n    return price > min && price < max\n}\n\nconst generateChart = () => {\n    if (IS_NODE) return //IF not DOM then break\n    const chartBox = document.querySelector('#chart')\n    chartBox.innerHTML = ''\n    const sumBuy = START_BUY.value + orderPoints.map(({orderPrice}) => {\n        return orderPrice\n    }).reduce((a, b) => a + b, 0)\n    //create first lines info\n    chartBox.innerHTML += `\n<p style=\"margin: 0; color: ${COLORS.GREEN_DARK}\">\nНачало сделки покупка ${START_BUY.value} USDT<br> рынок ${START_MARKET_VALUE.value} USDT\n<br> мин цена рынка ${MIN_END_MARKET_VALUE} USDT = падение на ${MAX_LOSE_PERCENT.value} % </p>\n`\n    chartBox.innerHTML += `<p style=\"margin: 0; color: ${sumBuy > MAX_BUY.value ? COLORS.RED : COLORS.GREEN_DARK}\">Сум вложения ${sumBuy} USDT</p>`\n    orderPoints.forEach((point, index) => {\n        const MIN_H = 40\n        const SIZE_KOEF = 30\n        const H_PIXELS = MIN_H + point.lastStep * SIZE_KOEF\n        const MAX_SAME_KOEF = H_PIXELS / Math.max(point.upToTp, point.sumStep)\n        //create line item\n        chartBox.innerHTML += `\n<div style=\"height: ${H_PIXELS}px; width: 100%; background-color: #313131; margin-top: 2px; display: flex; align-items: flex-end; overflow: scroll; flex-direction: row;\" >\n<p style=\"margin: 0px; margin-left: 5px; word-break: keep-all\">\n<p style=\"padding-right: 5px; color: #929292\">№${index + 1}. </p>\n<p style=\"color: ${COLORS.LIGHT};\">${point.marketValue} цена рынка (USDT)</p> \n<p style=\"color: ${COLORS.LIGHT};\">${point.orderPrice} цена ордера (USDT)</p>\n<p style=\"color: ${COLORS.ORANGE}\">${point.lastStep} (%) шаг цены</p> \n<p style=\"color: ${COLORS.RED}\">${point.sumStep} (%) сум падение цены</p> \n<p style=\"color: ${COLORS.GREEN}; padding-left: 5px; padding-right: 5px\" >${point.upToTp} (%) процент треб. роста до TP</p> \n<p style=\"color: ${COLORS.GREEN_DARK};\" >Цена рынка TP ${addPercent(point.marketValue, point.upToTp)} USDT</p> \n</p>\n<div style=\"width: 20px; height: ${point.lastStep * MAX_SAME_KOEF}px; background-color: ${COLORS.ORANGE}\"></div>\n<div style=\"width: 20px; height: ${point.upToTp * MAX_SAME_KOEF}px; background-color: ${COLORS.GREEN}\"></div>\n<div style=\"width: 20px; height: ${point.sumStep * MAX_SAME_KOEF}px; background-color: ${COLORS.RED}\"></div>\n</div>`\n    })\n}\n\nconst generateDom = () => {\n    if (IS_NODE) return //IF not DOM then break\n    const container = document.querySelector('#inputs')\n\n    SettingItem.items.forEach(({name, placeholder, value}) => {\n        container.innerHTML += `\n<p>\n<input type=\"number\" placeholder=\"${placeholder}\" value=\"${value}\" id=\"${name}\" />\n<label> ${placeholder}</label></p>\n`\n        let onChange = (val) => {\n            SettingItem.items.find(({name: n}) => n === name).value = val\n            logCalc()\n            generateChart()\n        }\n        document.addEventListener('input', function (e) {\n\n            //@ts-ignore\n            if (e.target && e.target.id == name && e.target.value) {\n                //@ts-ignore\n                const value = Number.parseFloat(e.target.value) || 0\n                localStorage.setItem(name, String(value))\n                onChange(value)\n            }\n        })\n        container.innerHTML += `<hr/>`\n    })\n}\n\nconst logCalc = () => {\n    orderPoints = []\n    console.log('START OF', new Date().toLocaleString())\n    let TP_KOEF = addPercent(1, TAKE_PROFIT_PERCENT.value)\n    //цена предыдущего ордера\n    let LAST_ORDER_VALUE = START_BUY.value\n    //сумма вложений текущая\n    let SUM_OF_BUY = START_BUY.value\n    //стоимотсть денег после предыдущего падения\n    let LAST_MONEY_AFTER_DOWN_SUM = START_BUY.value\n    //текущая цена рынка\n    let MARKET_VALUE = START_MARKET_VALUE.value\n\n    let LAST_STEP_PERCENT = STEP_DEFAULT_PERCENT.value\n    let STEP_DELTA_SUM = STEP_DEFAULT_PERCENT.value\n\n\n\n    //first buy\n    console.log('start buy = ', LAST_ORDER_VALUE, 'MARKET PRICE', MARKET_VALUE)\n    console.log('MARKET 1st sell price', addPercent(MARKET_VALUE, TAKE_PROFIT_PERCENT.value))\n    console.log('START TP = ', LAST_ORDER_VALUE * TP_KOEF + '\\n___')\n\n    console.log('\\nПараметры для бота')\n    console.table({\n        ['Мартенгейл']: START_MART.value,\n        ['Динамический шаг СО']: STEP_DIN.value,\n        ['Шаг СО(%)']: STEP_DEFAULT_PERCENT.value,\n        ['Take profit (%)']: TAKE_PROFIT_PERCENT.value,\n        ['Макс. Число ордеров']: ORDER_LEN.value,\n        ['Макс сумм депозит($)']: MAX_BUY.value,\n        ['Нач цена рынка (вход)']: START_MARKET_VALUE.value,\n        ['Мин цена рынка (ласт ордер)']: MIN_END_MARKET_VALUE,\n    })\n\n\n    for (let i = 0; i < ORDER_LEN.value; i++) {\n        //текущ цена рынка валюты\n        MARKET_VALUE = subPercent(MARKET_VALUE, LAST_STEP_PERCENT)\n\n        //реальная стоимость денег после падения на этом уровне\n        const MONEY_AFTER_DOWN = subPercent(LAST_MONEY_AFTER_DOWN_SUM, LAST_STEP_PERCENT)\n\n        //покупка нового ордера\n        const ORDER_VALUE = fixNumber(LAST_ORDER_VALUE * START_MART.value)\n        SUM_OF_BUY += ORDER_VALUE\n        LAST_ORDER_VALUE = ORDER_VALUE\n\n        //Реальная сум стоимость денег после падения в сумме с новым ордером\n        const SUM_REAL_CURRENT_MONEY = MONEY_AFTER_DOWN + ORDER_VALUE\n        //сохраняем значение стоимости денег. чтобы использовать его в слд цикле\n        LAST_MONEY_AFTER_DOWN_SUM = SUM_REAL_CURRENT_MONEY\n\n        //(потеря денег при продаже на текущ. уровне) расчитаем разницу в стоимости денег суммарной и вложенных деньгах\n        const DELTA_RESET_MONEY = SUM_OF_BUY - SUM_REAL_CURRENT_MONEY\n        //(процент роста треб-ый для откупа) разница в процентах от стоимости денег и вложенными деньгами\n        const DELTA_RESET_PERCENT = getPercentDiff(SUM_REAL_CURRENT_MONEY, SUM_OF_BUY)\n        //процент треб-го роста от цены ордера до тейка\n        const FULL_TP_PERCENT_FROM_ORDER = getPercentDiff(SUM_REAL_CURRENT_MONEY, addPercent(SUM_OF_BUY, TAKE_PROFIT_PERCENT.value))\n        //цена раныка валюты для откупа\n        const RESET_MONEY_VALUE = addPercent(MARKET_VALUE, DELTA_RESET_PERCENT)\n        //цена рынка валюты для получения тейк профита\n        const TP_MARKET_PRICE = addPercent(MARKET_VALUE, FULL_TP_PERCENT_FROM_ORDER)\n        //реальная цена денег при возрастании от уровня ордера до тейк профита\n        const TP_SELL_SUM_VALUE = addPercent(SUM_OF_BUY, TAKE_PROFIT_PERCENT.value)\n        //доход от продажи тейк профита\n        const SALARY_FROM_SELL_TP = TP_SELL_SUM_VALUE - SUM_OF_BUY\n\n        //buy order (price down)\n        const IS_VALID_SUM = SUM_OF_BUY <= MAX_BUY.value\n        const IS_VALID_MARKET_PRICE = checkMarketValid(MARKET_VALUE)\n        const MARKET_DELTA_RESULT = getPercentDiff(MIN_END_MARKET_VALUE, MARKET_VALUE)\n\n\n        console.table({\n            ['🌧 куплен СО (USD)']: ORDER_VALUE,\n            ['🚷 Потери при продаже на этом уровне (usd)']: DELTA_RESET_MONEY,\n            ['🚶 последний шаг падения цены СО (%)']: LAST_STEP_PERCENT,\n            ['📉 сумарное падение цены (%)']: getPercentDiff(START_MARKET_VALUE.value, MARKET_VALUE),\n            ['🌧 следующий ордер СО может быть на уровне']: subPercent(MARKET_VALUE, LAST_STEP_PERCENT * STEP_DIN.value),\n            [(IS_VALID_MARKET_PRICE ? '✅' : '⛔️') + ' текушая цена валюты (крипты)']: MARKET_VALUE,\n            ['📈 ✅ цена валюты Take Profit (крипты)']: TP_MARKET_PRICE,\n            ['отклонение цены от мин допустимой']: `${MARKET_DELTA_RESULT}% from max ${MAX_DELTA_MARKET_PERCENT}%`,\n            ['👇 стоимость денег после падения']: SUM_REAL_CURRENT_MONEY,\n            [(IS_VALID_SUM ? '👍' : '⛔️') + ' суммарные текущие вложения']: SUM_OF_BUY,\n            ['💸 сумма денег для продажи Take Profit']: TP_SELL_SUM_VALUE,\n            ['Цена валюты для откупа всех вложенных денег (крипты)']: RESET_MONEY_VALUE,\n            ['⬆️ Процент треб. роста для продажи TP']: `${FULL_TP_PERCENT_FROM_ORDER} %`,\n            ['🦺 Процент падения от уровня закупа до продажи TP (страховка)']: getPercentDiff(START_MARKET_VALUE.value, TP_MARKET_PRICE),\n            ['✅ Доход от продажи Take Profit (USD)']: SALARY_FROM_SELL_TP,\n        })\n\n        orderPoints.push({\n            orderPrice: ORDER_VALUE,\n            marketValue: MARKET_VALUE,\n            lastStep: LAST_STEP_PERCENT,\n            sumStep: STEP_DELTA_SUM,\n            upToTp: FULL_TP_PERCENT_FROM_ORDER\n        })\n\n        console.log(` Страховочный ордер ${i + 1} \\n`)\n\n        //перед началом след цикла (в конце предыдущего)\n        STEP_DELTA_SUM = fixNumber(STEP_DELTA_SUM + LAST_STEP_PERCENT)\n        LAST_STEP_PERCENT = fixNumber(LAST_STEP_PERCENT * STEP_DIN.value)\n    }\n\n}\n\ngenerateDom()\n\nlogCalc()\n\ngenerateChart()\n\n"]}