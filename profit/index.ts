import * as dat from 'dat.gui'
import moment from 'moment'
import Chartist from 'chartist'
import 'moment/locale/ru'

const gui = new dat.GUI({width: innerWidth / 2, autoPlace: true})
//params
const storageData = JSON.parse(localStorage.getItem('data'))
const params = {
    month: {month: storageData?.month?.month || 6},
    startSum: {startSum: storageData?.startSum?.startSum || 1000},
    everyMonth: {everyMonth: storageData?.everyMonth?.everyMonth || 1000},
    weekPercent: {weekPercent: storageData?.weekPercent?.weekPercent || 3},
}

//tools
const getDiffPercent = (from: number, to: number) => {
    return ((to - from) / from) * 100
}
const mainDiv = document.querySelector('#info')

const updateDisplay = () => {
    localStorage.setItem('data', JSON.stringify(params))
    //calc values show
    const daysCount: number = moment().add(params.month.month, 'month').diff(moment(), 'days')
    const yearCount: number = daysCount / 365
    const weeksCount: number = Math.round(daysCount / 7)
    let resultSum: number = params.startSum.startSum
    let points: string = ''
    const chartInfo: { week: number, value: number }[] = []
    for (let i = 0; i < weeksCount; i++) {
        const isAddMonth = (i % 4 === 0) && i > 0
        resultSum = resultSum * (1 + (params.weekPercent.weekPercent / 100))
        if (isAddMonth) {
            resultSum += params.everyMonth.everyMonth
        }
        points += `–ù–µ–¥–µ–ª—è: ${i + 1} –∏–∑ ${weeksCount} üçÄ<br/>–î–µ–Ω—å: ${(i + 1) * 7} üåû<br/>–°—É–º–º–∞: ${resultSum.toFixed(2)}$ üçó<br/>–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞: ${getDiffPercent(params.startSum.startSum, resultSum).toFixed(2)}% üìà<hr/>`
        if (isAddMonth) {
            points += `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Å. ${i / 4} = ${params.everyMonth.everyMonth}$ üí∏<br/><hr/>`
        }
        chartInfo.push({value: resultSum, week: i})
    }
    const growTotalPercent = getDiffPercent(params.startSum.startSum, resultSum)
    const ordersPercents = [11.1, 22.2, 66.6]
    const ordersPrices = ordersPercents.map((p, i) => `${i + 1}) ${(params.startSum.startSum * p / 100).toFixed(2)}$ ~ ${p}% ‚öôÔ∏è`)
    const displayTitles = `
        –ß–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤: ${params.month.month}<br/>
        –°—É–º–º–∞ –≤—Ö–æ–¥–∞: ${params.startSum.startSum}$<br/>
        –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –º–µ—Å—è—Ü : ${params.everyMonth.everyMonth}$<br/>
        –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –≤ –Ω–µ–¥–µ–ª—é: ${params.weekPercent.weekPercent}%<br/>
        <hr/>
        <br/><br/><br/><br/>
        –ß–∏—Å–ª–æ –ª–µ—Ç: ${yearCount} ‚è≥<br/>
        –ß–∏—Å–ª–æ –Ω–µ–¥–µ–ª—å: ${weeksCount} üçÄ<br/>
        –ß–∏—Å–ª–æ –¥–Ω–µ–π: ${daysCount} ‚òÄÔ∏è<br/>
        –°—Ç–æ–∏–º–æ—Ç–∏ –æ—Ä–µ–¥–µ—Ä–æ–≤ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: <br/><br/>${ordersPrices.join('<br/>')}<br/><br/>
        –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${growTotalPercent.toFixed(2)}% üìà<br/> 
        –ò—Ç–æ–≥ —Å—É–º–º–∞: ${resultSum.toFixed(2)}$ üçî<br/>
        <hr/>
        <br/><br/><br/><br/><br/>
        ${points}
        <hr/>
        
    `
    mainDiv.innerHTML = displayTitles
    new Chartist.Line('#chart', {
        // labels: map(chartInfo, 'week'),
        series: [
            // map(chartInfo, 'value'),
            {
                name: 'series-1',
                data: chartInfo.map(({value, week}) => ({
                    x: moment().add(week, 'week').toDate(),
                    y: value
                }))
            },
        ],
    }, {
        lineSmooth: Chartist.Interpolation.cardinal({
            tension: 0.2
        }),
        height: innerHeight / 3,
        axisY: {
            onlyInteger: true,
            labelInterpolationFnc: (value) => {
                return value + '$'
            }
        },
        axisX: {
            type: Chartist.FixedScaleAxis,
            divisor: 10,
            labelInterpolationFnc: function (value) {
                return moment(value).format('MMM D')
            }
        },
        chartPadding: {
            left: resultSum.toFixed().length * 4
        },
    })
}
updateDisplay()
const addObjectToGui = (obj: any, min: number = 0, max: number = 100, step: number = 1, name: string) => {
    const keyName = Object.keys(obj)[0]
    const folder = gui.addFolder(name)
    folder.open()
    folder.add(obj, keyName, min, max, step).onChange(() => updateDisplay())
}
//add handlers gui
addObjectToGui(params.month, 0, 60, 1, '–ß–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤') //10 years
addObjectToGui(params.startSum, 500, 200000, 1, '–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—É–º–º–∞')
addObjectToGui(params.everyMonth, 0, 50000, 1, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –º–µ—Å—è—Ü')
addObjectToGui(params.weekPercent, 0.1, 20, 0.1, '–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –≤ –Ω–µ–¥–µ–ª—é')

